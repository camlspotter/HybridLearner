/*
 * runBBall.cpp
 *
 *  Created on: 10-Mar-2023
 *      Author: amit
 */




#include "runBBall.h"


void runBBall_with_input(std::unique_ptr<MATLABEngine> &ep,
		user_inputs::ptr user,
		std::list<struct timeseries_input> initial_CE_values,
		std::vector<double> output_variable_init_values,
		intermediateResult::ptr intermediate) {
	//cout << "List of initial values are " << endl;
	/*for (unsigned int i=0; i< initial_CE_values.size(); i++) {
		cout << initial_CE_values[i] << " ,  ";
	}
	cout << endl;*/



	// ***** Example to pass vector data to Matlab using MatlabEngine ******
	/*std::vector<double> cppData{ 4, 8, 12, 16, 20, 24 };
	size_t x=1, y=6;	//Must use size_t other data types did not worked
	// Create a x-by-y matlab data array
	matlab::data::ArrayFactory factory;
	auto inputArray = factory.createArray({ x, y }, cppData.cbegin(), cppData.cend());
	ep->setVariable(u"cp_data", inputArray); 	//This example puts the variable named data in the MATLAB base workspace.*/
	// ***** Example to pass vector data to Matlab using MatlabEngine ******


	std::string cmd4 = "time_horizon = ";	// creating workspace variable
	cmd4.append(to_string(user->getTimeHorizon()));
	cmd4.append(";");
	ep->eval(convertUTF8StringToUTF16String(cmd4));

	cmd4 = "time_step = ";	// creating workspace variable
	cmd4.append(to_string(user->getSampleTime()));
	cmd4.append(";");
	ep->eval(convertUTF8StringToUTF16String(cmd4));

	std::list<struct timeseries_input>::iterator it_values = initial_CE_values.begin();

//	cout << "Time-Horizon and time-step Done " << endl;
//	cout << "Output variable size = " <<output_variable_init_values.size() << endl;

	/*for (unsigned int i=user->getListInputVariables().size(); i< output_variable_init_values.size(); i++) {
		cout <<"variable ID i = " << i <<" value = " << output_variable_init_values[i] << endl;
	}*/
	cmd4 = "a1 = ";	// creating workspace variable
	cmd4.append(to_string(output_variable_init_values[1])); // index 0 is input u; index 1 is ball-position and index 2 is ball-velocity
	cmd4.append(";");
	ep->eval(convertUTF8StringToUTF16String(cmd4));


	cmd4 = "a2 = ";	// creating workspace variable
	cmd4.append(to_string(output_variable_init_values[2])); // index 0 is input u; index 1 is ball-position and index 2 is ball-velocity
	cmd4.append(";");
	ep->eval(convertUTF8StringToUTF16String(cmd4));


//	list<vector<double>> var_control_points = initial_CE_values.var_values;
//	list<vector<double>> time_for_cp = initial_CE_values.time_values;
//
//
//	// *** Because we know that the BBall model has only one variable as input ***

//	list<vector<double>>::iterator it = var_control_points.begin();
//	list<vector<double>>::iterator it_time = time_for_cp.begin();

	//cout << "Time-Horizon and time-step Done " << endl;

	std::vector<double> cppData = (*it_values).var_values;
	size_t x=1, y=cppData.size();
	matlab::data::ArrayFactory factory;
	auto inputArray = factory.createArray({ x, y }, cppData.cbegin(), cppData.cend());
	ep->setVariable(u"u_input", inputArray);

	std::vector<double> cppTime = (*it_values).time_values;
	assert(y == cppTime.size());
	matlab::data::ArrayFactory factory1;
	auto inputArray1 = factory1.createArray({ x, y }, cppTime.cbegin(), cppTime.cend());
	ep->setVariable(u"u_time", inputArray1);

// **** End of Input Signal Generation ****




	unsigned int execution_count = user->getNumberMatlabSimulationExecuted();
	std::string pathOriginalModel_str="";

	//Removing the files generated by Matlab in the previous run
	if (execution_count == 0) {	//running for the first time
        std::string cmd = "rm result.txt";
		int x = system(cmd.c_str());
		if (x == -1) {
			std::cout <<"Error executing cmd: " << cmd <<std::endl;
		}
	}

//	cout << "Before calling run_BBall.m" << endl;
	//ep->eval(convertUTF8StringToUTF16String("run_oscillator"));
	ep->eval(u"run_bball");


	//This code can be used for other Models also.
	/*engEvalString(ep, "plot(x1,x2);");
	engEvalString(ep, "title('x1 vs. x2 of the Plot');");
	engEvalString(ep, "xlabel('x1');");
	engEvalString(ep, "ylabel('x2');");*/

	std::cout << "Done Calling Matlab's Bouncing Ball Simulink model (simulation)\n" << std::endl;

}

